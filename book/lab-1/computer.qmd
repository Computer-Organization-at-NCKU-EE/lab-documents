# What is Computer? {#sec-computer}

## The General View

So, what is a computer? There may be many different answers depending on who you ask. I would say that a computer is a kind of machine that [**can be programmed to perform tasks automatically**]{.mark}.

![Electronic Numerical Integrator And Computer (ENIAC), [Source](https://en.wikipedia.org/wiki/Computer)](images/ENIAC.jpg){width=80% fig-align="center"}

Early computers were primarily designed for numerical computation tasks, such as calculating ballistic trajectories. In contrast, modern computers can carry out a wide variety of general-purpose tasks. If early computers behaved like pure calculators, I would describe modern computers as automatic executors of algorithms.

This shift from specialized number crunching to versatile programmability marks the essence of the computer revolution. It is not only about speed, but also about flexibility --- the same machine can run entirely different programs, from scientific simulations to web browsing or gaming.

## The Abstract View

### The Software/Hardware Interface

We can also view computers as one kind of machine whose mission is to execute the software we want.

![](images/sw-hw-intf.png){width=50% fig-align="center"}

One big questions is that how the computer *understand* different programs? Computer are only a set of transistors, and how could it know how to execute programs? The key idea is about the ***Instruction Set Architecture***, or ***ISA*** for short. ISA is one kind of **abstraction** (**indirection**) layer. ISA can be viewed as a [common language between software programs and hardware implementations]{.mark}. Furthermore, ISA also **decouples** the details about software and hardware.

In general, computers are often referred to as the hardware in the figure above. A computer is a kind of hardware implementation which can recognize one or more kinds of of ISA. With the power of ISA, the computer (hardware) can execute different programs and complete the specific tasks.

### A Sophisticated Finite-State Machine (FSM)

In another point of view, computers can also be viewd as a very big and complicated finite-state machines (FSMs), which means that the two most important things are:

1. What is the current states of the computer?
2. How does the state transition happen in the computer?

## The Detailed View

### Von-Neumann Architecture

One type of computer organization is known as the ***Von-Neumann Architecture***, which was first discussed in the well-known report on the early computer ***EDVAC*** @von-neumann-arch-paper.
The fundamental idea of this architecture is to divide the computer system into five major components: the central arithmetic unit, the central control unit, the memory, and the input/output devices.

![Von-Neumann Architecture, [Source](https://en.wikipedia.org/wiki/Von_Neumann_architecture)](images/von-neumann.png){fig-align="center"}

A key feature of the Von Neumann Architecture is the unification of data and instruction memory.
In other words, both program instructions and data are stored in the same memory unit, and they share the same communication pathways.
This design greatly simplified early computer construction and programming, but it also introduced the so-called ***Von-Neumann bottleneck***, where the shared memory bus can become a performance limitation.

In order to execute a program, the computer must read instructions from the unified memory, and the control unit (C.U.) will try to recognize what the memory is.
After decoding the instruction, the C.U. will try to control the arithmetic unit (A.U.) to perform specific operations and gives the calculation result.

For a more general program, it is often that the program needs some input from the user and gives the output to the user/programmer.
Hence, the input/output units are also necessary parts.

### Harvard Architecture

***Harvard Architecture*** is firstly introduced in the early mainframe called **Harvard Mark I**.

![Harvard Architecture, [Source](https://en.wikipedia.org/wiki/Harvard_architecture)](images/harvard-arch.png){width=50% fig-align="center"}

The main difference between Von-Neumann Architecture and Harvard Architecture is that the specification of memory unit.

## Memory Map

### Physical Memory Space

For a 32-bit processor, the ***addressable*** range of the memory address is from `0x0000_0000` to `0xFFFF_FFFF`, and we refer to the range as ***physical memory space*** or memory space for short.
However, for a low-end system, the space of read memories (e.g., RAM and FLASH) are typically small, such as 64-KiB.

### Why Does The Computer Need Memory Map?

At this point, we already know that what a computer is and how a computer works.
However, there is still a big question: how these different components in the computer communicate with each other?
Let's consider a very simple (embedded) system as below:

![A Simple Computer System](images/simple-sys.png){width=50% fig-align="center"}

How can the CPU do if it want to control the LED light? One straightfowad idea is that we can think the LED light as one kind of memory device!
Let's say the memory location
