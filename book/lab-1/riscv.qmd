# Introduction to RISC-V ISA

::: {.callout-tip}
If you are interested in how RISC-V is developed and the art of RISC-V, you can read the book @riscv-reader.
:::

::: {.callout-warning}
In this lecture, it only covers the unprivileged architecture of RISC-V ISA, while there are privileged architecture in addition.
For more information about priv. architecture, please refer to the specification of privileged architecture @riscv-spec-priv.
:::

## The Software/Hardware Interface - ISA

## Introduction to RISC-V

> introduce the modular design of RISC-V, and CISC vs. RISC

## General Purpose Registers

Register are the most important part for almost any processor.
In RISC-V base integer set, there are 32 ***general purpose registers***, which are used for **any** purpose. However, the register `x0` should always be zero according the the ISA specification @riscv-spec-unpriv.
In addition, there is one special register which is called ***Program Counter*** or ***PC*** for short. The duty of PC is to record the memory address of the current instruction to be executed.

Here is the list of all 32 general purpose registers:

|*Register*  | *ABI*       | *Use by convention*                   | *Preserved?*|
|------------|-------------|---------------------------------------|-------------|
|x0          | zero        | hardwired to 0, ignores writes        | _n/a_       |
|x1          | ra          | return address for jumps              | no          |
|x2          | sp          | stack pointer                         | yes         |
|x3          | gp          | global pointer                        | _n/a_       |
|x4          | tp          | thread pointer                        | _n/a_       |
|x5          | t0          | temporary register 0                  | no          |
|x6          | t1          | temporary register 1                  | no          |
|x7          | t2          | temporary register 2                  | no          |
|x8          | s0 _or_ fp  | saved register 0 _or_ frame pointer   | yes         |
|x9          | s1          | saved register 1                      | yes         |
|x10         | a0          | return value _or_ function argument 0 | no          |
|x11         | a1          | return value _or_ function argument 1 | no          |
|x12         | a2          | function argument 2                   | no          |
|x13         | a3          | function argument 3                   | no          |
|x14         | a4          | function argument 4                   | no          |
|x15         | a5          | function argument 5                   | no          |
|x16         | a6          | function argument 6                   | no          |
|x17         | a7          | function argument 7                   | no          |
|x18         | s2          | saved register 2                      | yes         |
|x19         | s3          | saved register 3                      | yes         |
|x20         | s4          | saved register 4                      | yes         |
|x21         | s5          | saved register 5                      | yes         |
|x22         | s6          | saved register 6                      | yes         |
|x23         | s7          | saved register 7                      | yes         |
|x24         | s8          | saved register 8                      | yes         |
|x25         | s9          | saved register 9                      | yes         |
|x26         | s10         | saved register 10                     | yes         |
|x27         | s11         | saved register 11                     | yes         |
|x28         | t3          | temporary register 3                  | no          |
|x29         | t4          | temporary register 4                  | no          |
|x30         | t5          | temporary register 5                  | no          |
|x31         | t6          | temporary register 6                  | no          |
|pc          | _(none)_    | program counter                       | _n/a_       |

In order to implement the simulator which can simulate a RISC-V machine, the simulator must implements these registers inside.

::: {.callout-note}
You might note that there are two special columns in the table called *ABI* and *Preserved*. These entries are related to the concepts of *Application binary Interface (ABI)*.
The introduction to ABI will be placed at the @sec-riscv-abi, and we will skip this part at the moment.
:::

## RISC-V Instruction Encoding Formats

When it comes to ISA instructions, the encoding for the instruction is always the first aspect to address.
The way an instruction is encoded has a significant impact on how a processor is designed, particularly for the instruction decoder.
Similarly, it affects how we implement the decode logics when implementing the ISA simulator.
Therefore, getting familiar with RISC-V instruction formats is one of the essential tasks.

In RISC-V, there are **four** base instruction formats and **two** extended formats. The additional two formats are mainly related to the handling of immediates.

### Base Instruction Format

TODO

![](images/r-format.png){fig-align="center"}

![](images/i-format.png){fig-align="center"}

![](images/s-format.png){fig-align="center"}

![](images/u-format.png){fig-align="center"}


### Immediate Encoding Variants

TODO

## RV32I Instruction List

| Instruction Name | Opcode Map | Semantics |
|------------------|------------|-----------|
| TODO             | TODO       | TODO      |

::: {.callout-caution}
We did not actually cover __all__ RV32I instructions in this lab. There are three instructions we do not cover: FENCE, EBREAK and ECALL instructions.
:::
